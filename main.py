import logging
from telegram.ext import Application, MessageHandler, filters, CommandHandler, ConversationHandler
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove
from config import BOT_TOKEN
import sqlite3
from datetime import datetime, timedelta
import random

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG
)

logger = logging.getLogger(__name__)

PET_TYPES = ['monkey', 'owl', 'porcupine', 'rabbit']
PET_EMOJIS = {
    'monkey': 'üêµ',
    'owl': 'ü¶â',
    'porcupine': 'ü¶î',
    'rabbit': 'üêá'
}

PET_TYPE, NAME, MAIN_MENU = range(3)

HELP_TEXT = """
üêæ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Tamagotchi Bot!* üêæ

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ —Å–≤–æ–∏—Ö –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ø–∏—Ç–æ–º—Ü–∞—Ö. 

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞
/menu - –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/status - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞
/feed - –ø–æ–∫–æ—Ä–º–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞
/play - –ø–æ–∏–≥—Ä–∞—Ç—å —Å —Ç–µ–∫—É—â–∏–º –ø–∏—Ç–æ–º—Ü–µ–º

*–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:*
1. –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –¥–æ 4 –ø–∏—Ç–æ–º—Ü–µ–≤ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
2. –ö–∞–∂–¥—ã–π –ø–∏—Ç–æ–º–µ—Ü —Ç—Ä–µ–±—É–µ—Ç —É—Ö–æ–¥–∞ - –∫–æ—Ä–º–ª–µ–Ω–∏—è –∏ –∏–≥—Ä
3. –ï—Å–ª–∏ –Ω–µ —É—Ö–∞–∂–∏–≤–∞—Ç—å –∑–∞ –ø–∏—Ç–æ–º—Ü–µ–º, –µ–≥–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –±—É–¥—É—Ç —É—Ö—É–¥—à–∞—Ç—å—Å—è
4. –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É –ø–∏—Ç–æ–º—Ü–∞–º–∏ –≤ –º–µ–Ω—é

*–¢–∏–ø—ã –ø–∏—Ç–æ–º—Ü–µ–≤:*
- monkey üêµ
- owl ü¶â
- porcupine ü¶î
- rabbit üêá

–°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏ —Å–≤–æ–∏—Ö –ø–∏—Ç–æ–º—Ü–µ–≤ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ –æ—Ç –∏–≥—Ä—ã!
"""


def init_db():
    conn = sqlite3.connect('tamagotchi.db')
    cursor = conn.cursor()

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS pets (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        name TEXT,
        type TEXT,
        hunger INTEGER DEFAULT 50,
        happiness INTEGER DEFAULT 50,
        health INTEGER DEFAULT 100,
        last_fed TEXT,
        last_played TEXT,
        created_at TEXT,
        is_active INTEGER DEFAULT 0
    )
    ''')

    conn.commit()
    conn.close()


def create_pet(user_id, name, pet_type):
    conn = sqlite3.connect('tamagotchi.db')
    cursor = conn.cursor()

    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø–∏—Ç–æ–º—Ü–µ–≤
    cursor.execute('UPDATE pets SET is_active = 0 WHERE user_id = ?', (user_id,))

    now = datetime.now().isoformat()
    cursor.execute('''
    INSERT INTO pets (user_id, name, type, hunger, happiness, health, last_fed, last_played, created_at, is_active)
    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    ''', (user_id, name, pet_type, 50, 50, 100, now, now, now, 1))

    conn.commit()
    conn.close()


def get_active_pet(user_id):
    conn = sqlite3.connect('tamagotchi.db')
    cursor = conn.cursor()

    cursor.execute('SELECT * FROM pets WHERE user_id = ? AND is_active = 1', (user_id,))
    pet = cursor.fetchone()

    conn.close()

    if pet:
        return {
            'id': pet[0],
            'user_id': pet[1],
            'name': pet[2],
            'type': pet[3],
            'hunger': pet[4],
            'happiness': pet[5],
            'health': pet[6],
            'last_fed': pet[7],
            'last_played': pet[8],
            'created_at': pet[9],
            'is_active': pet[10]
        }
    return None


def get_all_pets(user_id):
    conn = sqlite3.connect('tamagotchi.db')
    cursor = conn.cursor()

    cursor.execute('SELECT * FROM pets WHERE user_id = ? ORDER BY is_active DESC', (user_id,))
    pets = cursor.fetchall()

    conn.close()

    return [{
        'id': pet[0],
        'user_id': pet[1],
        'name': pet[2],
        'type': pet[3],
        'hunger': pet[4],
        'happiness': pet[5],
        'health': pet[6],
        'last_fed': pet[7],
        'last_played': pet[8],
        'created_at': pet[9],
        'is_active': pet[10]
    } for pet in pets]


def update_pet(pet_id, **kwargs):
    conn = sqlite3.connect('tamagotchi.db')
    cursor = conn.cursor()

    set_clause = ', '.join([f"{key} = ?" for key in kwargs.keys()])
    values = list(kwargs.values())
    values.append(pet_id)

    cursor.execute(f'UPDATE pets SET {set_clause} WHERE id = ?', values)

    conn.commit()
    conn.close()


def set_active_pet(user_id, pet_id):
    conn = sqlite3.connect('tamagotchi.db')
    cursor = conn.cursor()

    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ—Ö –ø–∏—Ç–æ–º—Ü–µ–≤
    cursor.execute('UPDATE pets SET is_active = 0 WHERE user_id = ?', (user_id,))
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ
    cursor.execute('UPDATE pets SET is_active = 1 WHERE id = ?', (pet_id,))

    conn.commit()
    conn.close()


def count_pets(user_id):
    conn = sqlite3.connect('tamagotchi.db')
    cursor = conn.cursor()

    cursor.execute('SELECT COUNT(*) FROM pets WHERE user_id = ?', (user_id,))
    count = cursor.fetchone()[0]

    conn.close()
    return count


def check_pet_status(pet_id):
    conn = sqlite3.connect('tamagotchi.db')
    cursor = conn.cursor()

    cursor.execute('SELECT * FROM pets WHERE id = ?', (pet_id,))
    pet = cursor.fetchone()

    if not pet:
        conn.close()
        return None

    pet_dict = {
        'id': pet[0],
        'user_id': pet[1],
        'name': pet[2],
        'type': pet[3],
        'hunger': pet[4],
        'happiness': pet[5],
        'health': pet[6],
        'last_fed': pet[7],
        'last_played': pet[8],
        'created_at': pet[9],
        'is_active': pet[10]
    }

    now = datetime.now()
    last_fed = datetime.fromisoformat(pet_dict['last_fed'])
    last_played = datetime.fromisoformat(pet_dict['last_played'])

    hours_since_fed = (now - last_fed).total_seconds() / 3600
    hours_since_played = (now - last_played).total_seconds() / 3600

    hunger = min(100, max(0, pet_dict['hunger'] + int(10 * hours_since_fed)))
    happiness = min(100, max(0, pet_dict['happiness'] - int(5 * hours_since_played)))
    health = min(100, max(0, pet_dict['health'] - int(2 * hours_since_fed) - int(2 * hours_since_played)))

    update_pet(
        pet_dict['id'],
        hunger=hunger,
        happiness=happiness,
        health=health
    )

    pet_dict.update({
        'hunger': hunger,
        'happiness': happiness,
        'health': health
    })

    conn.close()
    return pet_dict


async def start(update, context):
    user_id = update.message.from_user.id
    pets = get_all_pets(user_id)

    if pets:
        await show_main_menu(update, context)
        return MAIN_MENU
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
        await help_command(update, context)
        await update.message.reply_text(
            "–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞!\n"
            "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–∏—Ç–æ–º—Ü–∞:",
            reply_markup=ReplyKeyboardMarkup([PET_TYPES], one_time_keyboard=True)
        )
        return PET_TYPE


async def help_command(update, context):
    await update.message.reply_text(HELP_TEXT, parse_mode='Markdown')


async def choose_pet_type(update, context):
    pet_type = update.message.text.lower()
    if pet_type not in PET_TYPES:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–∏—Ç–æ–º—Ü–µ–≤.")
        return PET_TYPE

    context.user_data['pet_type'] = pet_type
    await update.message.reply_text(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –∏–º—è –¥–ª—è –≤–∞—à–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞:",
        reply_markup=ReplyKeyboardRemove()
    )
    return NAME


async def get_pet_name(update, context):
    pet_name = update.message.text
    user_id = update.message.from_user.id
    pet_type = context.user_data['pet_type']

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–∏—Ç–æ–º–µ—Ü —Ç–∞–∫–æ–≥–æ —Ç–∏–ø–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    pets = get_all_pets(user_id)
    existing_types = {pet['type'] for pet in pets}

    if pet_type in existing_types:
        await update.message.reply_text(
            f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–∏—Ç–æ–º–µ—Ü —Ç–∏–ø–∞ {pet_type}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start."
        )
        return ConversationHandler.END

    if len(pets) >= 4:
        await update.message.reply_text(
            "–£ –≤–∞—Å —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏—Ç–æ–º—Ü–µ–≤ (4). –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –±–æ–ª—å—à–µ."
        )
        return ConversationHandler.END

    create_pet(user_id, pet_name, pet_type)
    emoji = PET_EMOJIS.get(pet_type, 'üêæ')

    await update.message.reply_text(
        f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –∑–∞–≤–µ–ª–∏ –Ω–æ–≤–æ–≥–æ {pet_type} –ø–æ –∏–º–µ–Ω–∏ {pet_name}! {emoji}\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞–º–∏."
    )

    await show_main_menu(update, context)
    return MAIN_MENU


async def show_main_menu(update, context):
    user_id = update.message.from_user.id
    pets = get_all_pets(user_id)
    active_pet = next((pet for pet in pets if pet['is_active']), None)

    if not pets:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–µ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤–æ–≥–æ.")
        return

    if not active_pet and pets:
        set_active_pet(user_id, pets[0]['id'])
        active_pet = pets[0]

    emoji = PET_EMOJIS.get(active_pet['type'], 'üêæ')
    pet_info = (
        f"–¢–µ–∫—É—â–∏–π –ø–∏—Ç–æ–º–µ—Ü: {active_pet['name']} ({active_pet['type']}) {emoji}\n"
        f"–ì–æ–ª–æ–¥: {active_pet['hunger']}/100\n"
        f"–°—á–∞—Å—Ç—å–µ: {active_pet['happiness']}/100\n"
        f"–ó–¥–æ—Ä–æ–≤—å–µ: {active_pet['health']}/100"
    )

    keyboard = [
        ['üçî –ü–æ–∫–æ—Ä–º–∏—Ç—å', 'üéæ –ü–æ–∏–≥—Ä–∞—Ç—å'],
        ['üìä –°—Ç–∞—Ç—É—Å', 'üîÑ –°–º–µ–Ω–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞'],
        ['‚ûï –ù–æ–≤—ã–π –ø–∏—Ç–æ–º–µ—Ü']
    ]

    if len(pets) >= 4:
        keyboard[2] = []

    await update.message.reply_text(
        pet_info,
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    )


async def main_menu_handler(update, context):
    text = update.message.text
    user_id = update.message.from_user.id
    active_pet = get_active_pet(user_id)

    if not active_pet:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞.")
        return MAIN_MENU

    if text == 'üçî –ü–æ–∫–æ—Ä–º–∏—Ç—å':
        await feed(update, context)
    elif text == 'üéæ –ü–æ–∏–≥—Ä–∞—Ç—å':
        await play(update, context)
    elif text == 'üìä –°—Ç–∞—Ç—É—Å':
        await status(update, context)
    elif text == 'üîÑ –°–º–µ–Ω–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞':
        await switch_pet(update, context)
        return MAIN_MENU
    elif text == '‚ûï –ù–æ–≤—ã–π –ø–∏—Ç–æ–º–µ—Ü':
        if count_pets(user_id) >= 4:
            await update.message.reply_text("–£ –≤–∞—Å —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏—Ç–æ–º—Ü–µ–≤ (4).")
            await show_main_menu(update, context)
            return MAIN_MENU
        else:
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞:",
                reply_markup=ReplyKeyboardMarkup([PET_TYPES], one_time_keyboard=True)
            )
            return PET_TYPE

    await show_main_menu(update, context)
    return MAIN_MENU


async def status(update, context):
    user_id = update.message.from_user.id
    active_pet = get_active_pet(user_id)

    if not active_pet:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞.")
        return

    pet = check_pet_status(active_pet['id'])

    if pet['health'] < 30:
        status_msg = "–û—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ üò±"
    elif pet['health'] < 60:
        status_msg = "–ü–ª–æ—Ö–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ üò¢"
    else:
        status_msg = "–•–æ—Ä–æ—à–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ üòä"

    emoji = PET_EMOJIS.get(pet['type'], 'üêæ')
    await update.message.reply_text(
        f"–ò–º—è: {pet['name']} ({pet['type']}) {emoji}\n"
        f"–ì–æ–ª–æ–¥: {pet['hunger']}/100\n"
        f"–°—á–∞—Å—Ç—å–µ: {pet['happiness']}/100\n"
        f"–ó–¥–æ—Ä–æ–≤—å–µ: {pet['health']}/100\n"
        f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {status_msg}"
    )


async def feed(update, context):
    user_id = update.message.from_user.id
    active_pet = get_active_pet(user_id)

    if not active_pet:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞.")
        return

    pet = check_pet_status(active_pet['id'])
    now = datetime.now().isoformat()
    hunger = max(0, pet['hunger'] - 30)

    update_pet(
        pet['id'],
        hunger=hunger,
        last_fed=now
    )

    emoji = PET_EMOJIS.get(pet['type'], 'üêæ')
    await update.message.reply_text(f"–í—ã –ø–æ–∫–æ—Ä–º–∏–ª–∏ {pet['name']} ({pet['type']})! üçî {emoji}")


async def play(update, context):
    user_id = update.message.from_user.id
    active_pet = get_active_pet(user_id)

    if not active_pet:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞.")
        return

    pet = check_pet_status(active_pet['id'])
    now = datetime.now().isoformat()
    happiness = min(100, pet['happiness'] + 20)

    update_pet(
        pet['id'],
        happiness=happiness,
        last_played=now
    )

    games = ["–º—è—á", "–ø—Ä—è—Ç–∫–∏", "–¥–æ–≥–æ–Ω—è–ª–∫–∏"]
    game = random.choice(games)
    emoji = PET_EMOJIS.get(pet['type'], 'üêæ')

    await update.message.reply_text(f"–í—ã –ø–æ–∏–≥—Ä–∞–ª–∏ —Å {pet['name']} ({pet['type']}) –≤ {game}! üéæ {emoji}")


async def switch_pet(update, context):
    user_id = update.message.from_user.id
    pets = get_all_pets(user_id)

    if len(pets) <= 1:
        await update.message.reply_text("–£ –≤–∞—Å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø–∏—Ç–æ–º–µ—Ü.")
        await show_main_menu(update, context)
        return MAIN_MENU

    keyboard = []
    for pet in pets:
        emoji = PET_EMOJIS.get(pet['type'], 'üêæ')
        status = "‚úÖ" if pet['is_active'] else ""
        keyboard.append([f"{status} {pet['name']} ({pet['type']}) {emoji}"])

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∏—Ç–æ–º—Ü–∞:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    )

    return 'SELECT_PET'


async def select_pet(update, context):
    user_id = update.message.from_user.id
    pets = get_all_pets(user_id)
    selected = update.message.text

    for pet in pets:
        emoji = PET_EMOJIS.get(pet['type'], 'üêæ')
        pet_str = f"{pet['name']} ({pet['type']}) {emoji}"
        if pet_str in selected:
            set_active_pet(user_id, pet['id'])
            await update.message.reply_text(
                f"–¢–µ–ø–µ—Ä—å –≤–∞—à –∞–∫—Ç–∏–≤–Ω—ã–π –ø–∏—Ç–æ–º–µ—Ü - {pet['name']}!",
                reply_markup=ReplyKeyboardRemove()
            )
            await show_main_menu(update, context)
            return MAIN_MENU

    await update.message.reply_text("–ü–∏—Ç–æ–º–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    return 'SELECT_PET'


async def menu(update, context):
    await show_main_menu(update, context)
    return MAIN_MENU


async def cancel(update, context):
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END


def main():
    init_db()

    application = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start), CommandHandler('menu', menu)],
        states={
            PET_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_pet_type)],
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_pet_name)],
            MAIN_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, main_menu_handler)],
            'SELECT_PET': [MessageHandler(filters.TEXT & ~filters.COMMAND, select_pet)]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("status", status))
    application.add_handler(CommandHandler("feed", feed))
    application.add_handler(CommandHandler("play", play))
    application.add_handler(CommandHandler("help", help_command))

    application.run_polling()


if __name__ == '__main__':
    main()